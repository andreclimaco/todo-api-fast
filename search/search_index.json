{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documenta\u00e7\u00e3o do Projeto TODO API","text":"<p>Esta aplica\u00e7\u00e3o \u00e9 uma API RESTful constru\u00edda com FastAPI, utilizando autentica\u00e7\u00e3o JWT, PostgreSQL, Alembic para migra\u00e7\u00e3o de banco de dados e Docker para orquestra\u00e7\u00e3o.</p>"},{"location":"#tecnologias-utilizadas","title":"\ud83d\udce6 Tecnologias Utilizadas","text":"<ul> <li>Python 3.11</li> <li>FastAPI</li> <li>SQLAlchemy</li> <li>Pydantic</li> <li>Alembic</li> <li>PostgreSQL</li> <li>Docker &amp; Docker Compose</li> <li>JWT (Autentica\u00e7\u00e3o)</li> </ul>"},{"location":"#estrutura-de-diretorios","title":"\ud83d\udcc1 Estrutura de Diret\u00f3rios","text":"<pre><code>TODO/\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 alembic.ini\n\u251c\u2500\u2500 alembic/\n\u2502   \u251c\u2500\u2500 env.py\n\u2502   \u251c\u2500\u2500 script.py.mako\n\u2502   \u2514\u2500\u2500 versions/\n\u2502       \u2514\u2500\u2500 *.py  \u2190 Scripts de migra\u00e7\u00e3o\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 main.py  \u2190 Ponto de entrada da API\n\u2502   \u251c\u2500\u2500 database.py  \u2190 Conex\u00e3o com o banco\n\u2502   \u251c\u2500\u2500 models.py  \u2190 Modelos SQLAlchemy\n\u2502   \u251c\u2500\u2500 schemas.py  \u2190 Schemas Pydantic\n\u2502   \u251c\u2500\u2500 security.py  \u2190 Autentica\u00e7\u00e3o e criptografia\n\u2502   \u251c\u2500\u2500 repositories.py  \u2190 Fun\u00e7\u00f5es de acesso ao banco\n\u2502   \u251c\u2500\u2500 requirements.txt\n\u2502   \u2514\u2500\u2500 routes/\n\u2502       \u251c\u2500\u2500 auth.py  \u2190 Endpoints de autentica\u00e7\u00e3o\n\u2502       \u2514\u2500\u2500 tasks.py  \u2190 Endpoints de tarefas\n</code></pre>"},{"location":"#como-configurar-o-ambiente","title":"\u2699\ufe0f Como Configurar o Ambiente","text":""},{"location":"#1-pre-requisitos","title":"1. Pr\u00e9-requisitos","text":"<ul> <li>Docker instalado: https://www.docker.com/products/docker-desktop</li> <li>Docker Compose</li> </ul>"},{"location":"#2-clonar-o-projeto","title":"2. Clonar o Projeto","text":"<p>Voc\u00ea pode descompactar o projeto ou clonar de um reposit\u00f3rio (caso esteja hospedado no Git).</p>"},{"location":"#3-variaveis-de-ambiente","title":"3. Vari\u00e1veis de Ambiente","text":"<p>A aplica\u00e7\u00e3o j\u00e1 usa valores padr\u00e3o no c\u00f3digo:</p> <ul> <li><code>DATABASE_URL</code>: <code>\"postgresql://postgres:postgres@db:5432/tododb\"</code></li> <li><code>SECRET_KEY</code>: <code>\"chave-secreta-super-segura\"</code></li> </ul> <p>Voc\u00ea pode usar vari\u00e1veis de ambiente reais em produ\u00e7\u00e3o.</p>"},{"location":"#como-executar-a-aplicacao","title":"\u25b6\ufe0f Como Executar a Aplica\u00e7\u00e3o","text":""},{"location":"#com-docker-recomendado","title":"Com Docker (recomendado)","text":"<pre><code>docker-compose up --build\n</code></pre> <p>Isso ir\u00e1: - Criar os containers do PostgreSQL e da API FastAPI. - Subir a aplica\u00e7\u00e3o em <code>http://localhost:8000</code>.</p>"},{"location":"#testar-api-via-swagger","title":"Testar API via Swagger","text":"<p>Acesse:</p> <pre><code>http://localhost:8000/docs\n</code></pre>"},{"location":"#rotas-disponiveis","title":"\ud83e\uddea Rotas Dispon\u00edveis","text":""},{"location":"#autenticacao-auth","title":"Autentica\u00e7\u00e3o (<code>/auth</code>)","text":"M\u00e9todo Rota Descri\u00e7\u00e3o POST <code>/register</code> Registrar novo usu\u00e1rio POST <code>/login</code> Login e gera\u00e7\u00e3o de token GET <code>/me</code> Dados do usu\u00e1rio logado"},{"location":"#tarefas-tasks","title":"Tarefas (<code>/tasks</code>)","text":"M\u00e9todo Rota Descri\u00e7\u00e3o POST <code>/tasks/</code> Criar nova tarefa GET <code>/tasks/</code> Listar tarefas do usu\u00e1rio GET <code>/tasks/{id}</code> Obter tarefa por ID PUT <code>/tasks/{id}</code> Atualizar tarefa DELETE <code>/tasks/{id}</code> Excluir tarefa POST <code>/tasks/{id}/complete</code> Marcar tarefa como conclu\u00edda"},{"location":"#migracoes-com-alembic","title":"\ud83d\uddc3\ufe0f Migra\u00e7\u00f5es com Alembic","text":""},{"location":"#criar-nova-migracao","title":"Criar nova migra\u00e7\u00e3o:","text":"<pre><code>docker-compose exec api alembic revision --autogenerate -m \"mensagem\"\n</code></pre>"},{"location":"#aplicar-migracoes","title":"Aplicar migra\u00e7\u00f5es:","text":"<pre><code>docker-compose exec api alembic upgrade head\n</code></pre>"},{"location":"#autores","title":"\ud83d\udc64 Autores","text":"<ul> <li>Projeto gen\u00e9rico para fins did\u00e1ticos</li> </ul>"},{"location":"#seguranca","title":"\ud83d\udee1\ufe0f Seguran\u00e7a","text":"<ul> <li>Senhas s\u00e3o armazenadas com hash <code>bcrypt</code>.</li> <li>Autentica\u00e7\u00e3o com tokens JWT v\u00e1lidos por 24 horas.</li> </ul>"},{"location":"#observacoes","title":"\u2705 Observa\u00e7\u00f5es","text":"<ul> <li>A API est\u00e1 pronta para uso com clientes front-end ou ferramentas como Postman, Insomnia, etc.</li> <li>Ideal para estudo de autentica\u00e7\u00e3o, APIs REST e Docker.</li> </ul>"},{"location":"autoapi/","title":"Refer\u00eancia da API","text":""},{"location":"autoapi/#app.main","title":"<code>main</code>","text":""},{"location":"autoapi/#app.routes.auth","title":"<code>auth</code>","text":""},{"location":"autoapi/#app.routes.auth.login","title":"<code>login(form_data=Depends(), db=Depends(get_db))</code>","text":"<p>Realiza login de um usu\u00e1rio v\u00e1lido e retorna um token JWT.</p> <p>Parameters:</p> Name Type Description Default <code>form_data</code> <code>OAuth2PasswordRequestForm</code> <p>Cont\u00e9m os campos username (email) e password.</p> <code>Depends()</code> <code>db</code> <code>Session</code> <p>Sess\u00e3o do banco de dados.</p> <code>Depends(get_db)</code> <p>Returns:</p> Name Type Description <code>Token</code> <p>Token JWT de acesso.</p> Source code in <code>app/routes/auth.py</code> <pre><code>@router.post(\"/login\", response_model=Token)\ndef login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):\n    \"\"\"\n    Realiza login de um usu\u00e1rio v\u00e1lido e retorna um token JWT.\n\n    Args:\n        form_data (OAuth2PasswordRequestForm): Cont\u00e9m os campos username (email) e password.\n        db (Session): Sess\u00e3o do banco de dados.\n\n    Returns:\n        Token: Token JWT de acesso.\n    \"\"\"\n    user = get_user_by_email(db, form_data.username)\n    if not user or not verify_password(form_data.password, user.senha_hash):\n        raise HTTPException(status_code=401, detail=\"Credenciais inv\u00e1lidas\")\n\n    access_token = create_access_token(\n        data={\"sub\": str(user.id)},\n        expires_delta=timedelta(minutes=60 * 24)\n    )\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n</code></pre>"},{"location":"autoapi/#app.routes.auth.obter_usuario_atual","title":"<code>obter_usuario_atual(current_user=Depends(get_current_user))</code>","text":"<p>Retorna os dados do usu\u00e1rio autenticado.</p> <p>Parameters:</p> Name Type Description Default <code>current_user</code> <code>Usuario</code> <p>Usu\u00e1rio autenticado via token JWT.</p> <code>Depends(get_current_user)</code> <p>Returns:</p> Name Type Description <code>UserOut</code> <p>Dados p\u00fablicos do usu\u00e1rio.</p> Source code in <code>app/routes/auth.py</code> <pre><code>@router.get(\"/me\", response_model=UserOut)\ndef obter_usuario_atual(current_user: Usuario = Depends(get_current_user)):\n    \"\"\"\n    Retorna os dados do usu\u00e1rio autenticado.\n\n    Args:\n        current_user (Usuario): Usu\u00e1rio autenticado via token JWT.\n\n    Returns:\n        UserOut: Dados p\u00fablicos do usu\u00e1rio.\n    \"\"\"\n    return current_user  # \u2705 FastAPI converte automaticamente para UserOut\n</code></pre>"},{"location":"autoapi/#app.routes.auth.register","title":"<code>register(user, db=Depends(get_db))</code>","text":"<p>Cria um novo usu\u00e1rio e retorna um token JWT.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>UserCreate</code> <p>Objeto com nome, email e senha fornecidos pelo usu\u00e1rio.</p> required <code>db</code> <code>Session</code> <p>Sess\u00e3o do banco de dados.</p> <code>Depends(get_db)</code> <p>Returns:</p> Name Type Description <code>Token</code> <p>Token JWT de acesso v\u00e1lido por 24h.</p> Source code in <code>app/routes/auth.py</code> <pre><code>@router.post(\"/register\", response_model=Token)\ndef register(user: UserCreate, db: Session = Depends(get_db)):\n    \"\"\"\n    Cria um novo usu\u00e1rio e retorna um token JWT.\n\n    Args:\n        user (UserCreate): Objeto com nome, email e senha fornecidos pelo usu\u00e1rio.\n        db (Session): Sess\u00e3o do banco de dados.\n\n    Returns:\n        Token: Token JWT de acesso v\u00e1lido por 24h.\n    \"\"\"\n    if get_user_by_email(db, user.email):\n        raise HTTPException(status_code=400, detail=\"E-mail j\u00e1 registrado\")\n\n    senha_hash = get_password_hash(user.senha)\n    novo_usuario = create_user(db, user, senha_hash)\n\n    access_token = create_access_token(\n        data={\"sub\": str(novo_usuario.id)},\n        expires_delta=timedelta(minutes=60 * 24)\n    )\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n</code></pre>"},{"location":"autoapi/#app.routes.tasks","title":"<code>tasks</code>","text":""},{"location":"autoapi/#app.routes.tasks.atualizar_tarefa","title":"<code>atualizar_tarefa(tarefa_id, tarefa_data, db=Depends(get_db), current_user=Depends(get_current_user))</code>","text":"<p>Atualiza os dados de uma tarefa do usu\u00e1rio autenticado.</p> <p>Parameters:</p> Name Type Description Default <code>tarefa_id</code> <code>UUID</code> <p>ID da tarefa.</p> required <code>tarefa_data</code> <code>TarefaBase</code> <p>Dados atualizados.</p> required <code>db</code> <code>Session</code> <p>Sess\u00e3o do banco de dados.</p> <code>Depends(get_db)</code> <code>current_user</code> <code>Usuario</code> <p>Usu\u00e1rio autenticado.</p> <code>Depends(get_current_user)</code> <p>Returns:</p> Name Type Description <code>TarefaOut</code> <p>Tarefa atualizada.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Se a tarefa n\u00e3o for encontrada.</p> Source code in <code>app/routes/tasks.py</code> <pre><code>@router.put(\"/{tarefa_id}\", response_model=TarefaOut)\ndef atualizar_tarefa(\n    tarefa_id: UUID,\n    tarefa_data: TarefaBase,\n    db: Session = Depends(get_db),\n    current_user=Depends(get_current_user)\n):\n    \"\"\"\n    Atualiza os dados de uma tarefa do usu\u00e1rio autenticado.\n\n    Args:\n        tarefa_id (UUID): ID da tarefa.\n        tarefa_data (TarefaBase): Dados atualizados.\n        db (Session): Sess\u00e3o do banco de dados.\n        current_user (Usuario): Usu\u00e1rio autenticado.\n\n    Returns:\n        TarefaOut: Tarefa atualizada.\n\n    Raises:\n        HTTPException: Se a tarefa n\u00e3o for encontrada.\n    \"\"\"\n    tarefa = get_tarefa(db, tarefa_id, current_user.id)\n    if not tarefa:\n        raise HTTPException(status_code=404, detail=\"Tarefa n\u00e3o encontrada\")\n    return update_tarefa(db, tarefa, tarefa_data)\n</code></pre>"},{"location":"autoapi/#app.routes.tasks.concluir_tarefa","title":"<code>concluir_tarefa(tarefa_id, db=Depends(get_db), current_user=Depends(get_current_user))</code>","text":"<p>Marca uma tarefa como conclu\u00edda.</p> <p>Parameters:</p> Name Type Description Default <code>tarefa_id</code> <code>UUID</code> <p>ID da tarefa.</p> required <code>db</code> <code>Session</code> <p>Sess\u00e3o do banco de dados.</p> <code>Depends(get_db)</code> <code>current_user</code> <code>Usuario</code> <p>Usu\u00e1rio autenticado.</p> <code>Depends(get_current_user)</code> <p>Returns:</p> Name Type Description <code>TarefaOut</code> <p>Tarefa atualizada como conclu\u00edda.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Se a tarefa n\u00e3o for encontrada.</p> Source code in <code>app/routes/tasks.py</code> <pre><code>@router.post(\"/{tarefa_id}/complete\", response_model=TarefaOut)\ndef concluir_tarefa(\n    tarefa_id: UUID,\n    db: Session = Depends(get_db),\n    current_user=Depends(get_current_user)\n):\n    \"\"\"\n    Marca uma tarefa como conclu\u00edda.\n\n    Args:\n        tarefa_id (UUID): ID da tarefa.\n        db (Session): Sess\u00e3o do banco de dados.\n        current_user (Usuario): Usu\u00e1rio autenticado.\n\n    Returns:\n        TarefaOut: Tarefa atualizada como conclu\u00edda.\n\n    Raises:\n        HTTPException: Se a tarefa n\u00e3o for encontrada.\n    \"\"\"\n    tarefa = get_tarefa(db, tarefa_id, current_user.id)\n    if not tarefa:\n        raise HTTPException(status_code=404, detail=\"Tarefa n\u00e3o encontrada\")\n    tarefa.status = \"concluida\"\n    db.commit()\n    db.refresh(tarefa)\n    return tarefa\n</code></pre>"},{"location":"autoapi/#app.routes.tasks.criar_tarefa","title":"<code>criar_tarefa(tarefa, db=Depends(get_db), current_user=Depends(get_current_user))</code>","text":"<p>Cria uma nova tarefa para o usu\u00e1rio autenticado.</p> <p>Parameters:</p> Name Type Description Default <code>tarefa</code> <code>TarefaBase</code> <p>Dados da tarefa.</p> required <code>db</code> <code>Session</code> <p>Sess\u00e3o do banco de dados.</p> <code>Depends(get_db)</code> <code>current_user</code> <code>Usuario</code> <p>Usu\u00e1rio autenticado.</p> <code>Depends(get_current_user)</code> <p>Returns:</p> Name Type Description <code>TarefaOut</code> <p>Dados da tarefa criada.</p> Source code in <code>app/routes/tasks.py</code> <pre><code>@router.post(\"/\", response_model=TarefaOut)\ndef criar_tarefa(\n    tarefa: TarefaBase,\n    db: Session = Depends(get_db),\n    current_user=Depends(get_current_user)\n):\n    \"\"\"\n    Cria uma nova tarefa para o usu\u00e1rio autenticado.\n\n    Args:\n        tarefa (TarefaBase): Dados da tarefa.\n        db (Session): Sess\u00e3o do banco de dados.\n        current_user (Usuario): Usu\u00e1rio autenticado.\n\n    Returns:\n        TarefaOut: Dados da tarefa criada.\n    \"\"\"\n    return create_tarefa(db, tarefa, current_user.id)\n</code></pre>"},{"location":"autoapi/#app.routes.tasks.deletar_tarefa","title":"<code>deletar_tarefa(tarefa_id, db=Depends(get_db), current_user=Depends(get_current_user))</code>","text":"<p>Remove uma tarefa do usu\u00e1rio autenticado.</p> <p>Parameters:</p> Name Type Description Default <code>tarefa_id</code> <code>UUID</code> <p>ID da tarefa.</p> required <code>db</code> <code>Session</code> <p>Sess\u00e3o do banco de dados.</p> <code>Depends(get_db)</code> <code>current_user</code> <code>Usuario</code> <p>Usu\u00e1rio autenticado.</p> <code>Depends(get_current_user)</code> <p>Returns:</p> Name Type Description <code>dict</code> <p>Confirma\u00e7\u00e3o de exclus\u00e3o.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Se a tarefa n\u00e3o for encontrada.</p> Source code in <code>app/routes/tasks.py</code> <pre><code>@router.delete(\"/{tarefa_id}\")\ndef deletar_tarefa(\n    tarefa_id: UUID,\n    db: Session = Depends(get_db),\n    current_user=Depends(get_current_user)\n):\n    \"\"\"\n    Remove uma tarefa do usu\u00e1rio autenticado.\n\n    Args:\n        tarefa_id (UUID): ID da tarefa.\n        db (Session): Sess\u00e3o do banco de dados.\n        current_user (Usuario): Usu\u00e1rio autenticado.\n\n    Returns:\n        dict: Confirma\u00e7\u00e3o de exclus\u00e3o.\n\n    Raises:\n        HTTPException: Se a tarefa n\u00e3o for encontrada.\n    \"\"\"\n    tarefa = get_tarefa(db, tarefa_id, current_user.id)\n    if not tarefa:\n        raise HTTPException(status_code=404, detail=\"Tarefa n\u00e3o encontrada\")\n    delete_tarefa(db, tarefa)\n    return {\"ok\": True}\n</code></pre>"},{"location":"autoapi/#app.routes.tasks.listar_tarefas","title":"<code>listar_tarefas(status=None, prioridade=None, db=Depends(get_db), current_user=Depends(get_current_user))</code>","text":"<p>Lista todas as tarefas do usu\u00e1rio autenticado com filtros opcionais.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>str</code> <p>Filtro pelo status da tarefa.</p> <code>None</code> <code>prioridade</code> <code>str</code> <p>Filtro pela prioridade.</p> <code>None</code> <code>db</code> <code>Session</code> <p>Sess\u00e3o do banco de dados.</p> <code>Depends(get_db)</code> <code>current_user</code> <code>Usuario</code> <p>Usu\u00e1rio autenticado.</p> <code>Depends(get_current_user)</code> <p>Returns:</p> Type Description <p>List[TarefaOut]: Lista de tarefas encontradas.</p> Source code in <code>app/routes/tasks.py</code> <pre><code>@router.get(\"/\", response_model=List[TarefaOut])\ndef listar_tarefas(\n    status: Optional[str] = None,\n    prioridade: Optional[str] = None,\n    db: Session = Depends(get_db),\n    current_user=Depends(get_current_user)\n):\n    \"\"\"\n    Lista todas as tarefas do usu\u00e1rio autenticado com filtros opcionais.\n\n    Args:\n        status (str, optional): Filtro pelo status da tarefa.\n        prioridade (str, optional): Filtro pela prioridade.\n        db (Session): Sess\u00e3o do banco de dados.\n        current_user (Usuario): Usu\u00e1rio autenticado.\n\n    Returns:\n        List[TarefaOut]: Lista de tarefas encontradas.\n    \"\"\"\n    return get_tarefas_by_user(db, current_user.id, status, prioridade)\n</code></pre>"},{"location":"autoapi/#app.routes.tasks.obter_tarefa","title":"<code>obter_tarefa(tarefa_id, db=Depends(get_db), current_user=Depends(get_current_user))</code>","text":"<p>Recupera uma tarefa espec\u00edfica do usu\u00e1rio autenticado.</p> <p>Parameters:</p> Name Type Description Default <code>tarefa_id</code> <code>UUID</code> <p>ID da tarefa.</p> required <code>db</code> <code>Session</code> <p>Sess\u00e3o do banco de dados.</p> <code>Depends(get_db)</code> <code>current_user</code> <code>Usuario</code> <p>Usu\u00e1rio autenticado.</p> <code>Depends(get_current_user)</code> <p>Returns:</p> Name Type Description <code>TarefaOut</code> <p>Dados da tarefa encontrada.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Se a tarefa n\u00e3o for encontrada.</p> Source code in <code>app/routes/tasks.py</code> <pre><code>@router.get(\"/{tarefa_id}\", response_model=TarefaOut)\ndef obter_tarefa(\n    tarefa_id: UUID,\n    db: Session = Depends(get_db),\n    current_user=Depends(get_current_user)\n):\n    \"\"\"\n    Recupera uma tarefa espec\u00edfica do usu\u00e1rio autenticado.\n\n    Args:\n        tarefa_id (UUID): ID da tarefa.\n        db (Session): Sess\u00e3o do banco de dados.\n        current_user (Usuario): Usu\u00e1rio autenticado.\n\n    Returns:\n        TarefaOut: Dados da tarefa encontrada.\n\n    Raises:\n        HTTPException: Se a tarefa n\u00e3o for encontrada.\n    \"\"\"\n    tarefa = get_tarefa(db, tarefa_id, current_user.id)\n    if not tarefa:\n        raise HTTPException(status_code=404, detail=\"Tarefa n\u00e3o encontrada\")\n    return tarefa\n</code></pre>"},{"location":"autoapi/#app.models","title":"<code>models</code>","text":""},{"location":"autoapi/#app.models.PrioridadeEnum","title":"<code>PrioridadeEnum</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enum para os n\u00edveis de prioridade da tarefa.</p> Source code in <code>app/models.py</code> <pre><code>class PrioridadeEnum(str, enum.Enum):\n    \"\"\"Enum para os n\u00edveis de prioridade da tarefa.\"\"\"\n    baixa = \"baixa\"\n    media = \"media\"\n    alta = \"alta\"\n</code></pre>"},{"location":"autoapi/#app.models.StatusEnum","title":"<code>StatusEnum</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enum para os status poss\u00edveis da tarefa.</p> Source code in <code>app/models.py</code> <pre><code>class StatusEnum(str, enum.Enum):\n    \"\"\"Enum para os status poss\u00edveis da tarefa.\"\"\"\n    pendente = \"pendente\"\n    em_andamento = \"em_andamento\"\n    concluida = \"concluida\"\n</code></pre>"},{"location":"autoapi/#app.models.Tarefa","title":"<code>Tarefa</code>","text":"<p>               Bases: <code>Base</code></p> <p>Modelo de tarefa atribu\u00edda a um usu\u00e1rio.</p> Atributos <p>id (UUID): Identificador \u00fanico da tarefa. titulo (str): T\u00edtulo da tarefa. descricao (str): Descri\u00e7\u00e3o detalhada da tarefa. data_vencimento (datetime): Data limite para conclus\u00e3o. prioridade (PrioridadeEnum): Prioridade da tarefa. status (StatusEnum): Status atual da tarefa. criado_em (datetime): Data de cria\u00e7\u00e3o da tarefa. dono_id (UUID): Chave estrangeira para o usu\u00e1rio dono. dono (Usuario): Relacionamento com o modelo Usuario.</p> Source code in <code>app/models.py</code> <pre><code>class Tarefa(Base):\n    \"\"\"\n    Modelo de tarefa atribu\u00edda a um usu\u00e1rio.\n\n    Atributos:\n        id (UUID): Identificador \u00fanico da tarefa.\n        titulo (str): T\u00edtulo da tarefa.\n        descricao (str): Descri\u00e7\u00e3o detalhada da tarefa.\n        data_vencimento (datetime): Data limite para conclus\u00e3o.\n        prioridade (PrioridadeEnum): Prioridade da tarefa.\n        status (StatusEnum): Status atual da tarefa.\n        criado_em (datetime): Data de cria\u00e7\u00e3o da tarefa.\n        dono_id (UUID): Chave estrangeira para o usu\u00e1rio dono.\n        dono (Usuario): Relacionamento com o modelo Usuario.\n    \"\"\"\n    __tablename__ = \"tarefas\"\n\n    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)\n    titulo = Column(String, nullable=False)\n    descricao = Column(Text)\n    data_vencimento = Column(DateTime)\n    prioridade = Column(Enum(PrioridadeEnum), default=PrioridadeEnum.media)\n    status = Column(Enum(StatusEnum), default=StatusEnum.pendente)\n    criado_em = Column(DateTime, default=datetime.utcnow)\n\n    dono_id = Column(UUID(as_uuid=True), ForeignKey(\"usuarios.id\"), nullable=False)\n    dono = relationship(\"Usuario\", back_populates=\"tarefas\")\n    atualizada_em = Column(DateTime, default=datetime.utcnow)\n</code></pre>"},{"location":"autoapi/#app.models.Usuario","title":"<code>Usuario</code>","text":"<p>               Bases: <code>Base</code></p> <p>Modelo de usu\u00e1rio do sistema.</p> Atributos <p>id (UUID): Identificador \u00fanico do usu\u00e1rio. nome (str): Nome completo do usu\u00e1rio. email (str): E-mail \u00fanico do usu\u00e1rio. senha_hash (str): Hash da senha para autentica\u00e7\u00e3o. criado_em (datetime): Data de cria\u00e7\u00e3o do usu\u00e1rio. tarefas (List[Tarefa]): Lista de tarefas associadas ao usu\u00e1rio.</p> Source code in <code>app/models.py</code> <pre><code>class Usuario(Base):\n    \"\"\"\n    Modelo de usu\u00e1rio do sistema.\n\n    Atributos:\n        id (UUID): Identificador \u00fanico do usu\u00e1rio.\n        nome (str): Nome completo do usu\u00e1rio.\n        email (str): E-mail \u00fanico do usu\u00e1rio.\n        senha_hash (str): Hash da senha para autentica\u00e7\u00e3o.\n        criado_em (datetime): Data de cria\u00e7\u00e3o do usu\u00e1rio.\n        tarefas (List[Tarefa]): Lista de tarefas associadas ao usu\u00e1rio.\n    \"\"\"\n    __tablename__ = \"usuarios\"\n\n    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)\n    nome = Column(String, nullable=False)\n    email = Column(String, unique=True, nullable=False)\n    senha_hash = Column(String, nullable=False)\n    criado_em = Column(DateTime, default=datetime.utcnow)\n\n    tarefas = relationship(\"Tarefa\", back_populates=\"dono\")\n</code></pre>"},{"location":"autoapi/#app.schemas","title":"<code>schemas</code>","text":""},{"location":"autoapi/#app.schemas.PrioridadeEnum","title":"<code>PrioridadeEnum</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enum para representar o n\u00edvel de prioridade da tarefa.</p> Source code in <code>app/schemas.py</code> <pre><code>class PrioridadeEnum(str, Enum):\n    \"\"\"Enum para representar o n\u00edvel de prioridade da tarefa.\"\"\"\n    baixa = \"baixa\"\n    media = \"media\"\n    alta = \"alta\"\n</code></pre>"},{"location":"autoapi/#app.schemas.StatusEnum","title":"<code>StatusEnum</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enum para representar o status atual da tarefa.</p> Source code in <code>app/schemas.py</code> <pre><code>class StatusEnum(str, Enum):\n    \"\"\"Enum para representar o status atual da tarefa.\"\"\"\n    pendente = \"pendente\"\n    em_andamento = \"em_andamento\"\n    concluida = \"concluida\"\n</code></pre>"},{"location":"autoapi/#app.schemas.TarefaBase","title":"<code>TarefaBase</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Representa os dados b\u00e1sicos de uma tarefa (entrada/atualiza\u00e7\u00e3o).</p> Atributos <p>titulo (str): T\u00edtulo da tarefa. descricao (Optional[str]): Descri\u00e7\u00e3o detalhada. data_vencimento (Optional[datetime]): Data limite. prioridade (PrioridadeEnum): N\u00edvel de prioridade. status (StatusEnum): Estado atual da tarefa.</p> Source code in <code>app/schemas.py</code> <pre><code>class TarefaBase(BaseModel):\n    \"\"\"\n    Representa os dados b\u00e1sicos de uma tarefa (entrada/atualiza\u00e7\u00e3o).\n\n    Atributos:\n        titulo (str): T\u00edtulo da tarefa.\n        descricao (Optional[str]): Descri\u00e7\u00e3o detalhada.\n        data_vencimento (Optional[datetime]): Data limite.\n        prioridade (PrioridadeEnum): N\u00edvel de prioridade.\n        status (StatusEnum): Estado atual da tarefa.\n    \"\"\"\n    titulo: str\n    descricao: Optional[str] = None\n    data_vencimento: Optional[datetime] = None\n    prioridade: PrioridadeEnum\n    status: StatusEnum\n</code></pre>"},{"location":"autoapi/#app.schemas.TarefaOut","title":"<code>TarefaOut</code>","text":"<p>               Bases: <code>TarefaBase</code></p> <p>Representa os dados de sa\u00edda de uma tarefa.</p> Atributos adicionais <p>id (UUID): Identificador \u00fanico da tarefa. dono_id (UUID): ID do usu\u00e1rio dono da tarefa. criado_em (datetime): Timestamp de cria\u00e7\u00e3o. atualizada_em (datetime): Timestamp da \u00faltima atualiza\u00e7\u00e3o.</p> Source code in <code>app/schemas.py</code> <pre><code>class TarefaOut(TarefaBase):\n    \"\"\"\n    Representa os dados de sa\u00edda de uma tarefa.\n\n    Atributos adicionais:\n        id (UUID): Identificador \u00fanico da tarefa.\n        dono_id (UUID): ID do usu\u00e1rio dono da tarefa.\n        criado_em (datetime): Timestamp de cria\u00e7\u00e3o.\n        atualizada_em (datetime): Timestamp da \u00faltima atualiza\u00e7\u00e3o.\n    \"\"\"\n    id: UUID\n    dono_id: UUID\n    criado_em: datetime\n    atualizada_em: datetime\n\n    class Config:\n        orm_mode = True\n</code></pre>"},{"location":"autoapi/#app.schemas.Token","title":"<code>Token</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Representa um token JWT de autentica\u00e7\u00e3o.</p> Atributos <p>access_token (str): Token de acesso JWT. token_type (str): Tipo do token (ex: \"bearer\").</p> Source code in <code>app/schemas.py</code> <pre><code>class Token(BaseModel):\n    \"\"\"\n    Representa um token JWT de autentica\u00e7\u00e3o.\n\n    Atributos:\n        access_token (str): Token de acesso JWT.\n        token_type (str): Tipo do token (ex: \"bearer\").\n    \"\"\"\n    access_token: str\n    token_type: str\n</code></pre>"},{"location":"autoapi/#app.schemas.UserCreate","title":"<code>UserCreate</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Representa os dados de entrada para cria\u00e7\u00e3o de um usu\u00e1rio.</p> Atributos <p>nome (str): Nome completo. email (EmailStr): E-mail v\u00e1lido. senha (str): Senha em texto plano.</p> Source code in <code>app/schemas.py</code> <pre><code>class UserCreate(BaseModel):\n    \"\"\"\n    Representa os dados de entrada para cria\u00e7\u00e3o de um usu\u00e1rio.\n\n    Atributos:\n        nome (str): Nome completo.\n        email (EmailStr): E-mail v\u00e1lido.\n        senha (str): Senha em texto plano.\n    \"\"\"\n    nome: str\n    email: EmailStr\n    senha: str\n</code></pre>"},{"location":"autoapi/#app.schemas.UserOut","title":"<code>UserOut</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Representa os dados p\u00fablicos de um usu\u00e1rio.</p> Atributos <p>id (UUID): Identificador do usu\u00e1rio. nome (str): Nome completo. email (EmailStr): E-mail do usu\u00e1rio. criado_em (datetime): Timestamp de cria\u00e7\u00e3o.</p> Source code in <code>app/schemas.py</code> <pre><code>class UserOut(BaseModel):\n    \"\"\"\n    Representa os dados p\u00fablicos de um usu\u00e1rio.\n\n    Atributos:\n        id (UUID): Identificador do usu\u00e1rio.\n        nome (str): Nome completo.\n        email (EmailStr): E-mail do usu\u00e1rio.\n        criado_em (datetime): Timestamp de cria\u00e7\u00e3o.\n    \"\"\"\n    id: UUID\n    nome: str\n    email: EmailStr\n    criado_em: datetime\n\n    class Config:\n        orm_mode = True\n</code></pre>"},{"location":"autoapi/#app.repositories","title":"<code>repositories</code>","text":""},{"location":"autoapi/#app.security","title":"<code>security</code>","text":""},{"location":"autoapi/#app.security.create_access_token","title":"<code>create_access_token(data, expires_delta=None)</code>","text":"<p>Gera um token JWT com os dados fornecidos.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dados que ser\u00e3o codificados no token (ex: {\"sub\": user_id}).</p> required <code>expires_delta</code> <code>Optional[timedelta]</code> <p>Tempo de expira\u00e7\u00e3o. Padr\u00e3o: 24h.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Token JWT codificado.</p> Source code in <code>app/security.py</code> <pre><code>def create_access_token(data: dict, expires_delta: Optional[timedelta] = None) -&gt; str:\n    \"\"\"\n    Gera um token JWT com os dados fornecidos.\n\n    Args:\n        data (dict): Dados que ser\u00e3o codificados no token (ex: {\"sub\": user_id}).\n        expires_delta (Optional[timedelta]): Tempo de expira\u00e7\u00e3o. Padr\u00e3o: 24h.\n\n    Returns:\n        str: Token JWT codificado.\n    \"\"\"\n    to_encode = data.copy()\n    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))\n    to_encode.update({\"exp\": expire})\n    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n</code></pre>"},{"location":"autoapi/#app.security.get_current_user","title":"<code>get_current_user(token=Depends(oauth2_scheme), db=Depends(get_db))</code>","text":"<p>Recupera o usu\u00e1rio autenticado com base no token JWT.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Token JWT enviado no header Authorization.</p> <code>Depends(oauth2_scheme)</code> <code>db</code> <code>Session</code> <p>Sess\u00e3o ativa do banco de dados.</p> <code>Depends(get_db)</code> <p>Returns:</p> Name Type Description <code>Usuario</code> <code>Usuario</code> <p>Inst\u00e2ncia do usu\u00e1rio autenticado.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Se as credenciais forem inv\u00e1lidas ou token estiver expirado/malformado.</p> Source code in <code>app/security.py</code> <pre><code>def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)) -&gt; Usuario:\n    \"\"\"\n    Recupera o usu\u00e1rio autenticado com base no token JWT.\n\n    Args:\n        token (str): Token JWT enviado no header Authorization.\n        db (Session): Sess\u00e3o ativa do banco de dados.\n\n    Returns:\n        Usuario: Inst\u00e2ncia do usu\u00e1rio autenticado.\n\n    Raises:\n        HTTPException: Se as credenciais forem inv\u00e1lidas ou token estiver expirado/malformado.\n    \"\"\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"N\u00e3o foi poss\u00edvel validar as credenciais\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        user_id: str = payload.get(\"sub\")\n        if user_id is None:\n            raise credentials_exception\n    except JWTError:\n        raise credentials_exception\n\n    user = get_user_by_id(db, UUID(user_id))\n    if user is None:\n        raise credentials_exception\n\n    return user\n</code></pre>"},{"location":"autoapi/#app.security.get_password_hash","title":"<code>get_password_hash(password)</code>","text":"<p>Gera o hash de uma senha utilizando bcrypt.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>Senha em texto plano.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Hash da senha.</p> Source code in <code>app/security.py</code> <pre><code>def get_password_hash(password: str) -&gt; str:\n    \"\"\"\n    Gera o hash de uma senha utilizando bcrypt.\n\n    Args:\n        password (str): Senha em texto plano.\n\n    Returns:\n        str: Hash da senha.\n    \"\"\"\n    return pwd_context.hash(password)\n</code></pre>"},{"location":"autoapi/#app.security.verify_password","title":"<code>verify_password(plain_password, hashed_password)</code>","text":"<p>Verifica se uma senha corresponde ao hash armazenado.</p> <p>Parameters:</p> Name Type Description Default <code>plain_password</code> <code>str</code> <p>Senha fornecida pelo usu\u00e1rio.</p> required <code>hashed_password</code> <code>str</code> <p>Hash armazenado no banco.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True se a senha for v\u00e1lida, False caso contr\u00e1rio.</p> Source code in <code>app/security.py</code> <pre><code>def verify_password(plain_password: str, hashed_password: str) -&gt; bool:\n    \"\"\"\n    Verifica se uma senha corresponde ao hash armazenado.\n\n    Args:\n        plain_password (str): Senha fornecida pelo usu\u00e1rio.\n        hashed_password (str): Hash armazenado no banco.\n\n    Returns:\n        bool: True se a senha for v\u00e1lida, False caso contr\u00e1rio.\n    \"\"\"\n    return pwd_context.verify(plain_password, hashed_password)\n</code></pre>"},{"location":"autoapi/#app.database","title":"<code>database</code>","text":""},{"location":"autoapi/#app.database.get_db","title":"<code>get_db()</code>","text":"<p>Retorna uma sess\u00e3o do banco de dados para ser usada com Depends() nas rotas.</p> <p>Yields:</p> Name Type Description <code>Session</code> <p>Sess\u00e3o ativa do SQLAlchemy para executar opera\u00e7\u00f5es no banco.</p> Source code in <code>app/database.py</code> <pre><code>def get_db():\n    \"\"\"\n    Retorna uma sess\u00e3o do banco de dados para ser usada com Depends() nas rotas.\n\n    Yields:\n        Session: Sess\u00e3o ativa do SQLAlchemy para executar opera\u00e7\u00f5es no banco.\n    \"\"\"\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre>"},{"location":"endpoints/","title":"\ud83d\udccc Endpoints da API","text":""},{"location":"endpoints/#autenticacao","title":"\ud83d\udd10 Autentica\u00e7\u00e3o","text":""},{"location":"endpoints/#post-register","title":"POST <code>/register</code>","text":"<p>Cria um novo usu\u00e1rio e retorna um token JWT.</p> <p>Par\u00e2metros: - <code>user</code>: Objeto com nome, email e senha. - <code>db</code>: Sess\u00e3o do banco de dados.</p> <p>Resposta: - Token JWT v\u00e1lido por 24 horas.</p> <p>Exemplo de Requisi\u00e7\u00e3o</p> <pre><code>POST /register\n{\n  \"nome\": \"Jo\u00e3o da Silva\",\n  \"email\": \"joao@example.com\",\n  \"senha\": \"123456\"\n}\n</code></pre> <p>Exemplo de Resposta</p> <pre><code>{\n  \"access_token\": \"eyJhbGciOiJIUzI1...\",\n  \"token_type\": \"bearer\"\n}\n</code></pre>"},{"location":"endpoints/#post-login","title":"POST <code>/login</code>","text":"<p>Realiza login e retorna um token JWT.</p> <p>Par\u00e2metros (form-data): - <code>username</code>: Email - <code>password</code>: Senha</p> <p>Exemplo de Resposta</p> <pre><code>{\n  \"access_token\": \"eyJhbGciOiJIUzI1...\",\n  \"token_type\": \"bearer\"\n}\n</code></pre>"},{"location":"endpoints/#get-me","title":"GET <code>/me</code>","text":"<p>Retorna os dados do usu\u00e1rio autenticado.</p> <p>Cabe\u00e7alho necess\u00e1rio: - <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Resposta:</p> <pre><code>{\n  \"id\": \"UUID\",\n  \"nome\": \"Jo\u00e3o da Silva\",\n  \"email\": \"joao@example.com\"\n}\n</code></pre>"},{"location":"endpoints/#tarefas","title":"\u2705 Tarefas","text":""},{"location":"endpoints/#post-tasks","title":"POST <code>/tasks/</code>","text":"<p>Cria uma nova tarefa.</p> <p>Par\u00e2metros: - <code>tarefa</code>: Dados da tarefa.</p> <p>Resposta: - Tarefa criada com sucesso.</p>"},{"location":"endpoints/#get-tasks","title":"GET <code>/tasks/</code>","text":"<p>Lista tarefas do usu\u00e1rio com filtros opcionais.</p> <p>Par\u00e2metros opcionais: - <code>status</code> - <code>prioridade</code></p>"},{"location":"endpoints/#get-taskstarefa_id","title":"GET <code>/tasks/{tarefa_id}</code>","text":"<p>Recupera uma tarefa espec\u00edfica.</p> <p>Resposta: - Dados da tarefa.</p>"},{"location":"endpoints/#put-taskstarefa_id","title":"PUT <code>/tasks/{tarefa_id}</code>","text":"<p>Atualiza os dados de uma tarefa.</p>"},{"location":"endpoints/#delete-taskstarefa_id","title":"DELETE <code>/tasks/{tarefa_id}</code>","text":"<p>Remove uma tarefa existente.</p>"},{"location":"endpoints/#post-taskstarefa_idcomplete","title":"POST <code>/tasks/{tarefa_id}/complete</code>","text":"<p>Marca uma tarefa como conclu\u00edda.</p>"},{"location":"requisitos/","title":"Documento de Requisitos de Software (DRS)","text":""},{"location":"requisitos/#aplicacao-todo-gerenciador-de-tarefas","title":"Aplica\u00e7\u00e3o: TODO \u2013 Gerenciador de Tarefas","text":""},{"location":"requisitos/#versao-10","title":"Vers\u00e3o: 1.0","text":""},{"location":"requisitos/#data-01082025","title":"Data: 01/08/2025","text":""},{"location":"requisitos/#tecnologia-principal-fastapi-python-311","title":"Tecnologia principal: FastAPI (Python 3.11)","text":""},{"location":"requisitos/#1-introducao","title":"1. Introdu\u00e7\u00e3o","text":""},{"location":"requisitos/#11-proposito","title":"1.1 Prop\u00f3sito","text":"<p>Este documento descreve os requisitos funcionais e n\u00e3o funcionais do sistema TODO, uma aplica\u00e7\u00e3o de gerenciamento de tarefas baseada em API REST desenvolvida com FastAPI. O objetivo \u00e9 permitir que usu\u00e1rios cadastrem, editem, visualizem, filtrem e excluam tarefas de forma eficiente e escal\u00e1vel.</p>"},{"location":"requisitos/#12-escopo-do-sistema","title":"1.2 Escopo do Sistema","text":"<p>O sistema TODO ser\u00e1 um backend exposto via FastAPI, que possibilita integra\u00e7\u00e3o com clientes web ou mobile. Os principais recursos incluem:</p> <ul> <li>Autentica\u00e7\u00e3o de usu\u00e1rios (JWT)</li> <li>CRUD de tarefas</li> <li>Marca\u00e7\u00e3o de prioridade e status</li> <li>Filtros e ordena\u00e7\u00e3o</li> <li>Integra\u00e7\u00e3o com banco de dados relacional (PostgreSQL)</li> <li>Documenta\u00e7\u00e3o autom\u00e1tica com Swagger</li> </ul>"},{"location":"requisitos/#2-requisitos-funcionais","title":"2. Requisitos Funcionais","text":""},{"location":"requisitos/#rf01-cadastro-de-usuario","title":"RF01 \u2013 Cadastro de Usu\u00e1rio","text":"<ul> <li>O sistema deve permitir que um novo usu\u00e1rio se registre com nome, e-mail e senha.</li> <li>O e-mail deve ser \u00fanico e validado.</li> </ul>"},{"location":"requisitos/#rf02-autenticacao","title":"RF02 \u2013 Autentica\u00e7\u00e3o","text":"<ul> <li>O sistema deve permitir login via e-mail e senha.</li> <li>Ap\u00f3s autentica\u00e7\u00e3o, deve gerar e retornar um token JWT v\u00e1lido por 24h.</li> <li>O sistema deve proteger todas as rotas de tarefas, exceto o login e o cadastro.</li> </ul>"},{"location":"requisitos/#rf03-criacao-de-tarefa","title":"RF03 \u2013 Cria\u00e7\u00e3o de Tarefa","text":"<ul> <li> <p>O usu\u00e1rio autenticado deve poder criar uma tarefa com:</p> </li> <li> <p>T\u00edtulo (obrigat\u00f3rio)</p> </li> <li>Descri\u00e7\u00e3o (opcional)</li> <li>Data de vencimento (opcional)</li> <li>Prioridade: baixa, m\u00e9dia, alta (padr\u00e3o: m\u00e9dia)</li> <li>Status: pendente, em andamento, conclu\u00edda (padr\u00e3o: pendente)</li> </ul>"},{"location":"requisitos/#rf04-listagem-de-tarefas","title":"RF04 \u2013 Listagem de Tarefas","text":"<ul> <li>O sistema deve permitir que o usu\u00e1rio veja todas as suas tarefas.</li> <li> <p>Deve haver possibilidade de:</p> </li> <li> <p>Filtrar por status e prioridade</p> </li> <li>Ordenar por data de cria\u00e7\u00e3o ou vencimento</li> </ul>"},{"location":"requisitos/#rf05-atualizacao-de-tarefa","title":"RF05 \u2013 Atualiza\u00e7\u00e3o de Tarefa","text":"<ul> <li>O usu\u00e1rio deve poder editar qualquer campo de uma tarefa de sua autoria.</li> <li>Campos n\u00e3o enviados devem permanecer inalterados.</li> </ul>"},{"location":"requisitos/#rf06-exclusao-de-tarefa","title":"RF06 \u2013 Exclus\u00e3o de Tarefa","text":"<ul> <li>O usu\u00e1rio deve poder excluir tarefas individualmente.</li> </ul>"},{"location":"requisitos/#rf07-marcar-como-concluida","title":"RF07 \u2013 Marcar como Conclu\u00edda","text":"<ul> <li>O sistema deve permitir altera\u00e7\u00e3o r\u00e1pida de status para \"conclu\u00edda\".</li> </ul>"},{"location":"requisitos/#3-requisitos-nao-funcionais","title":"3. Requisitos N\u00e3o Funcionais","text":""},{"location":"requisitos/#rnf01-tecnologia-e-frameworks","title":"RNF01 \u2013 Tecnologia e Frameworks","text":"<ul> <li>O backend deve ser desenvolvido em Python 3.11+ utilizando FastAPI.</li> <li>O banco de dados deve ser PostgreSQL.</li> <li>O ORM utilizado ser\u00e1 o SQLAlchemy 2.0 ou SQLModel.</li> </ul>"},{"location":"requisitos/#rnf02-autenticacao","title":"RNF02 \u2013 Autentica\u00e7\u00e3o","text":"<ul> <li>A autentica\u00e7\u00e3o ser\u00e1 baseada em JWT.</li> <li>Tokens devem ser assinados com chave secreta e ter expira\u00e7\u00e3o definida.</li> </ul>"},{"location":"requisitos/#rnf03-documentacao-da-api","title":"RNF03 \u2013 Documenta\u00e7\u00e3o da API","text":"<ul> <li>Toda a API deve ser documentada automaticamente com Swagger UI (via FastAPI).</li> <li>Tamb\u00e9m dever\u00e1 estar dispon\u00edvel em <code>/docs</code> e <code>/redoc</code>.</li> </ul>"},{"location":"requisitos/#rnf04-deploy","title":"RNF04 \u2013 Deploy","text":"<ul> <li>A aplica\u00e7\u00e3o ser\u00e1 empacotada com Docker e orquestrada com Docker Compose.</li> <li>O deploy ser\u00e1 feito em ambiente Linux Ubuntu 22.04.</li> </ul>"},{"location":"requisitos/#rnf05-testes","title":"RNF05 \u2013 Testes","text":"<ul> <li>O sistema deve possuir cobertura m\u00ednima de testes unit\u00e1rios de 80%.</li> <li>A framework de testes ser\u00e1 <code>pytest</code>.</li> </ul>"},{"location":"requisitos/#rnf06-desempenho","title":"RNF06 \u2013 Desempenho","text":"<ul> <li>O sistema deve suportar no m\u00ednimo 100 requisi\u00e7\u00f5es simult\u00e2neas sem degrada\u00e7\u00e3o percept\u00edvel de desempenho (resposta &lt; 1s).</li> </ul>"},{"location":"requisitos/#4-modelo-de-dados-entidades-principais","title":"4. Modelo de Dados (Entidades Principais)","text":""},{"location":"requisitos/#usuario","title":"Usu\u00e1rio","text":"Campo Tipo Regras id UUID Gerado automaticamente nome string Obrigat\u00f3rio email string \u00danico, obrigat\u00f3rio, validado senha_hash string Criptografada com bcrypt criado_em datetime Auto gerado"},{"location":"requisitos/#tarefa","title":"Tarefa","text":"Campo Tipo Regras id UUID Gerado automaticamente titulo string Obrigat\u00f3rio descricao text Opcional data_vencimento date Opcional prioridade enum [\"baixa\", \"media\", \"alta\"], padr\u00e3o: \"media\" status enum [\"pendente\", \"em_andamento\", \"concluida\"] dono_id UUID FK \u2192 Usu\u00e1rio criado_em datetime Auto gerado"},{"location":"requisitos/#5-api-endpoints-resumo","title":"5. API Endpoints (Resumo)","text":"M\u00e9todo Endpoint Descri\u00e7\u00e3o Protegido POST /auth/register Cadastro de usu\u00e1rio \u274c POST /auth/login Login e gera\u00e7\u00e3o de token \u274c GET /tasks Listar tarefas \u2705 POST /tasks Criar tarefa \u2705 GET /tasks/{id} Obter uma tarefa \u2705 PUT /tasks/{id} Atualizar tarefa \u2705 DELETE /tasks/{id} Excluir tarefa \u2705 POST /tasks/{id}/complete Marcar tarefa como conclu\u00edda \u2705"},{"location":"requisitos/#6-restricoes","title":"6. Restri\u00e7\u00f5es","text":"<ul> <li>A senha deve conter no m\u00ednimo 8 caracteres.</li> <li>Um usu\u00e1rio s\u00f3 pode ver e manipular suas pr\u00f3prias tarefas.</li> <li>Todas as datas devem seguir o padr\u00e3o ISO 8601 (YYYY-MM-DD).</li> </ul>"},{"location":"requisitos/#7-criterios-de-aceitacao","title":"7. Crit\u00e9rios de Aceita\u00e7\u00e3o","text":"<ul> <li>O sistema deve permitir login, CRUD de tarefas e listagem filtr\u00e1vel.</li> <li>Tarefas devem estar protegidas por autentica\u00e7\u00e3o.</li> <li>A documenta\u00e7\u00e3o <code>/docs</code> deve refletir corretamente todos os endpoints.</li> <li>A aplica\u00e7\u00e3o deve passar todos os testes automatizados com cobertura \u2265 80%.</li> </ul> <p>Se quiser, posso converter isso em <code>.docx</code>, <code>.pdf</code>, ou gerar os modelos de banco e os endpoints em c\u00f3digo FastAPI. Deseja seguir para isso?</p>"}]}